import type { PeerId } from "@libp2p/interface";
import { type ContentTopic, type CoreProtocolResult, type Libp2p, type PubsubTopic } from "@waku/interfaces";
import { WakuMessage } from "@waku/proto";
export declare const FilterCodecs: {
    SUBSCRIBE: string;
    PUSH: string;
};
type IncomingMessageHandler = (pubsubTopic: PubsubTopic, wakuMessage: WakuMessage, peerIdStr: string) => Promise<void>;
export declare class FilterCore {
    private handleIncomingMessage;
    private streamManager;
    readonly multicodec: string;
    constructor(handleIncomingMessage: IncomingMessageHandler, libp2p: Libp2p);
    subscribe(pubsubTopic: PubsubTopic, peerId: PeerId, contentTopics: ContentTopic[]): Promise<CoreProtocolResult>;
    unsubscribe(pubsubTopic: PubsubTopic, peerId: PeerId, contentTopics: ContentTopic[]): Promise<CoreProtocolResult>;
    unsubscribeAll(pubsubTopic: PubsubTopic, peerId: PeerId): Promise<CoreProtocolResult>;
    ping(peerId: PeerId): Promise<CoreProtocolResult>;
    private onRequest;
}
export {};
